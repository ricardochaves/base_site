apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: media-redis-deployment
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
      labels:
        app: media-redis
    spec:
      volumes:
        - name: host-sys
          hostPath:
            path: /sys
      initContainers:
        - name: disable-thp
          image: redis:4.0-alpine 
          volumeMounts:
            - name: host-sys
              mountPath: /host-sys
          command: ["sh", "-c", "echo never > /host-sys/kernel/mm/transparent_hugepage/enabled"]
      containers:
      - name: redis
        image: redis:4.0-alpine
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 250m
            memory: 500Mi
        ports:
        - containerPort: 6379
      - name: redis-exporter
        image: oliver006/redis_exporter:v0.21.1
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 9121
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
  name: redis
  labels:
    app: media-redis 
spec:
  ports:
  - port: 6379 
    name: redis
  - port: 9121
    name: metrics
  selector:
    app: media-redis 
---
apiVersion: v1
kind: Service
metadata:
  name: db
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
data:
  initdb.sql: |
    CREATE DATABASE base_site;
---
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
          # Use secret in real usage
        - name: MYSQL_ROOT_PASSWORD
          value: example
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
      - name: mysql-initdb
        configMap:
          name: mysql-initdb-config
---
apiVersion: apps/v1beta2
kind: Deployment
metadata: {name: lb}
spec:
  selector: {matchLabels: {name: lb}}
  template:
    metadata: {labels: {name: lb}}
    spec:
      containers:
        - name: app
          image: ricardobchaves6/base_site:latest
          command: ["./base_site.sh"]
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: DB_DATA_BASE
              value: "base_site"
            - name: DATABASE_USER
              value: "root"
            - name: DB_PASSWORD
              value: "example"
            - name: DB_HOST
              value: "db"
            - name: DB_PORT
              value: "3306"
            - name: GUNICORN_WORKS
              value: "1"
            - name: PORT
              value: "8080"
            - name: PYTHONUNBUFFERED
              value: "1"
          ports: 
            - name: http
              containerPort: 8080
---
apiVersion: v1
kind: Service
metadata: {name: lb}
spec:
  selector: {name: lb}
  type: LoadBalancer
  ports:
    - name: http
      port: 8181
      targetPort: http
